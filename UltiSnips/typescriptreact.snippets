extends typescript

snippet rnfc "React Native Functional Component" b
import { FC } from "react";
import { View } from "react-native";

interface ${1:`!p snip.rv = snip.basename`}Props {
// TODO: Component props
}

/**
 * ${2:$1 documentation}
 */
const $1: FC<$1Props> = ($3) => {
	return (
		<${4:View}>
			${5:{/*TODO: Component body*/}}
		</${4/^(\w+).*/$1/}>
	);
};

export default $1;
endsnippet

snippet rfc "React Functional Component" b
import { FC } from "react";

interface ${1:`!p snip.rv = snip.basename`}Props {

}

/**
 * ${2:$1 documentation}
 */
const $1: FC<$1Props> = ($3) => {
	return (
		<${4:div}>
			${5:{/*TODO: Component body*/}}
		</${4/^(\w+).*/$1/}>
	);
};

export default $1;
endsnippet

snippet cb "TSX Comentary block" b
{/* $1 */}
endsnippet

snippet newContext "Create a new React Context" b
import { FC, ReactNode, createContext, useContext, useState } from "react";

interface $1ContextValue {
	$3: $4,
	set${3/\w+\s*/\u$0/}: (x: $4) => void;
	
}

const $1Context = createContext<$1ContextValue | null>(null);
export default $1Context;

/**
 * TODO: $1 Documentation
 */
export const $1Provider: FC<{ children: ReactNode }> = ({
  children,
}) => {
	const [$3, set${3/\w+\s*/\u$0/}] = useState<$4>($5);

	return (
		<$1Context.Provider
			value={{
				$3, 
				set${3/\w+\s*/\u$0/},
			}}
		>
			{children}
		</$1Context.Provider>
	);
};

export const use$1 = () => {
	const context = useContext($1Context);

	if (!context) {
		throw new Error('use$1 must be used within an $1Provider');
	}

	return context;
}

endsnippet
