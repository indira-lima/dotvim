snippet ds "Debug Style" 
borderWidth: ${1:1},$2borderColor: ${3:'red'},
endsnippet

snippet us "useState snippet" b
const [$1, set${1/\w+\s*/\u$0/}] = useState<$2>($3);
$4
endsnippet

snippet ue "useEffect snippet" b
useEffect(($1) => {
	$2
}, [$3]);
endsnippet

snippet um "useMemo snippet" b
const $1 = useMemo<$2>(() => {
	return $3
}, [$4])
endsnippet

snippet ur "useRef snippet" b
const $1 = useRef<$2>($3);
endsnippet

snippet uc "useCallback snippet" b
const $1 = useCallback(() => {
	$2
}, [$3])
endsnippet

snippet uh "Use some hook" b
const { $2 } = use$1$3();
endsnippet

snippet tsig "Add a @ts-ignore commentary"
// @ts-ignore
endsnippet

snippet Tsig "Add a @ts-ignore commentary"
{/* @ts-ignore */}
endsnippet

snippet unav "useNavigation snippet" b
const navigation = useNavigation();
endsnippet

snippet uisfoc "useIsFocused snippet" b
const isFocused = useIsFocused();
endsnippet

snippet urou "useRoute snippet" b
const route = useRoute();
endsnippet

snippet log "console.log" 
console.log($1);
endsnippet

snippet rh "React Hook" b
import { useCallback } from "react";

interface ${1/^(...)(.*)/\u$2/}Props {
	callback: () => void;
}

/**
 * ${2:$1}
 */
const ${1:`!p snip.rv = snip.basename`} = ($3): ${1/^(...)(.*)/\u$2/}Props => {

	const callback = useCallback(() => {
		// TODO: custom hook callback
	}, []);

	return {
		callback	
	};
};

export default $1;

endsnippet

snippet rnss "React Native StyleSheet" b
import { StyleSheet } from "react-native";

const styles = StyleSheet.create({
	$1,
});

export default styles;
endsnippet

snippet handle "MÃ©todo handle dos controllers do Adonis" b
  public async handle({ response, request }: HttpContextContract) {
    const $1 = await $2.query()

    response.send({
      success: true,
      $1,
    });
  }
endsnippet

snippet rg "Adonis Route Group" b
Route.group(() => {
  Route.get("/", "$2").middleware("auth:$3");
}).prefix("$1");
endsnippet
